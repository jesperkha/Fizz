# Valid cases, should not raise error
> # This is a comment
> type 1;
> age := 20;
> age += 1;
> if true { 1 + 1; }
> while { break; }
> func main(a, b) { return 1; } main(1, 2);
> define p{n} a := p(2); a.n == 2;
> b := p(p(p(1))); b.n.n.n == 1;
> func closure() {
    i := 0;
    func add() {i += 1;}
    return add;
}
f := closure(); f();
> include "str"; str.toString(1);
> [1, 2, 3][0] = 4;
> ([1, 2, 3])[0] = 4;
> [[1, 2, 3]][0][0] = 4;
> enum { one two three } 1 + one;
> repeat (20 - 1) {}
> arr := [2, 3, 4]; range n in arr {}
> range n in 5 - 1 {}
> range n in (5 - (4 + 1)), 1 {}
> range n in 3, (5 + 5), 3 {}

?

# Invalid cases, should raise error
> prt 30;
> a a = 0;
> func(){}
> func main(a) {} main();
> if {}
> while a + 2 {}
> c := p(1); c.n.n;
> b.n();
> .b.n;
> b.n.;
> [1, 2, 3][0][0] = 4;
> (1, 2, 3)[0] = 4;
> enum { 1 two }
> repeat (1, 2) {}
> range 2 in 10 {}
> range 1, 2, 3, 4 {}
> range 0, 10, -1 {}